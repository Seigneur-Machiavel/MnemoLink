const fs = require('fs');
const path = require('path');

function addCodeLine(str = "", codeStr = '') {
	return str + codeStr + '\n';
}

function main() {
	const folderPath = "../builds"
	const destinationPath = path.join(__dirname, 'chrome-extension/scripts/MnemoLinker');
    const files = fs.readdirSync(folderPath);
  
    let latestVersion = [0, 1]; // will look like 0.1
	let versions = [];
    for (let i = 0; i < files.length; i++) {
		const file = files[i];
		if (!file.endsWith('.js')) { continue; }
	
		const version = file.split('_v')[1].split('.js')[0].split('.');
		const versionNumber = [Number(version[0]), Number(version[1])];
		if (versionNumber[0] > latestVersion[0] || (versionNumber[0] === latestVersion[0] && versionNumber[1] > latestVersion[1])) {
			latestVersion = versionNumber;
		} else {
			versions.push(versionNumber);
		}
		fs.copyFileSync(path.join(folderPath, file), path.join(destinationPath, file));
    }
	
	// BUILD mnemoLinkerLoader.js
	let fileContent = "";
	fileContent = addCodeLine(fileContent, `// This file is generated by build-config.js`);
	fileContent = addCodeLine(fileContent, `// Do not modify manually!\n`);
	fileContent = addCodeLine(fileContent, `// BEGIN OF GENERATED FILE`);
	fileContent = addCodeLine(fileContent, `window.MnemoLinker = {
		latestVersion: "${latestVersion.join('.')}",
		versions: [${versions.map(version => `"${version.join('.')}"`).join(', ')}]
	};`);

	// import all versions with promises that would be resolved later
	fileContent = addCodeLine(fileContent, `window.MnemoLinker.versions.forEach(version => {
		const filePath = "./MnemoLinker/MnemoLinker_v" + version + ".js";
		window.MnemoLinker["v" + version] = import(filePath).then(module => module.MnemoLinker);
	});`);

	fileContent = addCodeLine(fileContent, `// END OF GENERATED FILE`);
  
	fs.writeFileSync(path.join(__dirname, 'chrome-extension/scripts/mnemoLinkerLoader.js'), fileContent);
}
main();