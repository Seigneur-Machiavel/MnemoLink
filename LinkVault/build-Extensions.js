const fs = require('fs-extra');
const path = require('path');
const archiver = require('archiver');

const folderPath = "../builds"
const chromeExtensionFolder = 'chrome-extension';
const mozillaExtensionFolder = 'mozilla-extension';

function addCodeLine(str = "", codeStr = '') { return str + codeStr + '\n'; }
function buildMnemoLinkerLoader() {
	const destinationPath = path.join(__dirname, `${chromeExtensionFolder}/scripts/MnemoLinker`);
    const files = fs.readdirSync(folderPath);
  
    let latestVersion = [0, 1]; // will look like 0.1
	let versions = [];
    for (let i = 0; i < files.length; i++) {
		const file = files[i];
		if (!file.endsWith('.js')) { continue; }
	
		const version = file.split('_v')[1].split('.js')[0].split('.');
		const versionNumber = [Number(version[0]), Number(version[1])];
		if (versionNumber[0] > latestVersion[0] || (versionNumber[0] === latestVersion[0] && versionNumber[1] > latestVersion[1])) {
			latestVersion = versionNumber;
		} else {
			versions.push(versionNumber);
		}
		fs.copyFileSync(path.join(folderPath, file), path.join(destinationPath, file));
    }
	
	// BUILD mnemoLinkerLoader.js
	let fileContent = "";
	fileContent = addCodeLine(fileContent, `// This file is generated by build-config.js`);
	fileContent = addCodeLine(fileContent, `// Do not modify manually!\n`);
	fileContent = addCodeLine(fileContent, `// BEGIN OF GENERATED FILE`);
	fileContent = addCodeLine(fileContent, `window.MnemoLinker = {
		latestVersion: "${latestVersion.join('.')}",
		versions: [${versions.map(version => `"${version.join('.')}"`).join(', ')}]
	};`);

	// import all versions with promises that would be resolved later
	fileContent = addCodeLine(fileContent, `window.MnemoLinker.versions.forEach(version => {
		const filePath = "./MnemoLinker/MnemoLinker_v" + version + ".js";
		window.MnemoLinker["v" + version] = import(filePath).then(module => module.MnemoLinker);
	});`);

	fileContent = addCodeLine(fileContent, `// END OF GENERATED FILE`);
  
	fs.writeFileSync(path.join(__dirname, `${chromeExtensionFolder}/scripts/mnemoLinkerLoader.js`), fileContent);

	return latestVersion;
}
function zipDirectory(sourceDir, outPath) {
	const archive = archiver('zip', { zlib: { level: 9 } });
	const stream = fs.createWriteStream(outPath);
	return new Promise((resolve, reject) => {
		archive
			.directory(sourceDir, false)
			.on('error', err => reject(err))
			.pipe(stream);
		stream.on('close', () => resolve());
		archive.finalize();
	});
}

function main(deleteMozillaFolder = false) {
	// GET THE CHROME MANIFEST
	const chromeManifest = JSON.parse(fs.readFileSync(path.join(__dirname, `${chromeExtensionFolder}/manifest.json`)));
	const manifestVersion = chromeManifest.version;
	// BUILD mnemoLinkerLoader.js in chrome extension
	const lastVersion = buildMnemoLinkerLoader();
	if (!lastVersion) { console.error('Error building mnemoLinkerLoader.js'); return; }

	// DELETE mozilla extension folder
	const mozillaExtensionPath = path.join(__dirname, `${mozillaExtensionFolder}`);
	if (fs.existsSync(mozillaExtensionPath)) { fs.rmSync(mozillaExtensionPath, { recursive: true }); }

	// COPY the chrome folder to the mozilla extension
	fs.mkdirSync(mozillaExtensionPath);
	// Copy the entire folder
	const sourceDir = path.join(__dirname, `${chromeExtensionFolder}`);
   	const destDir = path.join(__dirname, `${mozillaExtensionFolder}`);
	fs.copySync(sourceDir, destDir);

	// ADAPT THE MANIFEST FOR MOZILLA
	const moazillaManifest = JSON.parse(fs.readFileSync(path.join(__dirname, `${mozillaExtensionFolder}/manifest.json`)));
	moazillaManifest.background = { scripts: ["scripts/background.js"] };

	// SAVE THE MANIFEST
	fs.writeFileSync(path.join(__dirname, `${mozillaExtensionFolder}/manifest.json`), JSON.stringify(moazillaManifest, null, 2));

	// ZIP THE FOLDERS
	const chromeZipPath = path.join(__dirname, `${chromeExtensionFolder}-${manifestVersion}.zip`);
	const mozillaZipPath = path.join(__dirname, `${mozillaExtensionFolder}-${manifestVersion}.zip`);

	zipDirectory(path.join(__dirname, chromeExtensionFolder), chromeZipPath).then(() => {
		console.log(`Chrome extension zipped at: ${chromeZipPath}`);
	}).catch(err => {
		console.error('Error zipping chrome extension:', err);
	});

	zipDirectory(path.join(__dirname, mozillaExtensionFolder), mozillaZipPath).then(() => {
		console.log(`Mozilla extension zipped at: ${mozillaZipPath}`);
	}).catch(err => {
		console.error('Error zipping mozilla extension:', err);
	});

	if (deleteMozillaFolder) {
		fs.rmSync(mozillaExtensionPath, { recursive: true });
	}
}
main();